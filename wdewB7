package linkedlistoperation;

import java.util.*;

public class Linkedlistoperation {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        LinkedList<Integer> linkedlist = new LinkedList<Integer>();

        System.out.println("Enter the number of elements to create linkedlist:");
        int n = sc.nextInt();

        System.out.println("Enter the elements:");
        for (int i = 0; i < n; i++) {
            int e = sc.nextInt();
            linkedlist.add(e);
        }

        while (true) {
            System.out.println("1. To insert");
            System.out.println("2. To swap");
            System.out.println("3. To iterate in reverse order");
            System.out.println("4. Compare with another linked list");
            System.out.println("5. Convert linked list to array list");
            System.out.println("6. Exit");

            System.out.println("Enter choice:");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter position: ");
                    int pos = sc.nextInt();
                    System.out.print("Enter element: ");
                    int ele = sc.nextInt();
                    linkedlist.add(pos, ele);
                    System.out.println("LinkedList is " + linkedlist);
                    break;

                case 2:
                    System.out.print("Enter index 1 to swap: ");
                    int index1 = sc.nextInt();
                    System.out.print("Enter index 2: ");
                    int index2 = sc.nextInt();
                    Collections.swap(linkedlist, index1, index2);
                    System.out.println("LinkedList is " + linkedlist);
                    break;

                case 3:
                    System.out.println("Reverse order:");
                    ListIterator<Integer> iterator = linkedlist.listIterator(linkedlist.size());
                    while (iterator.hasPrevious()) {
                        System.out.print(iterator.previous() + " ");
                    }
                    System.out.println();
                    break;

                case 4:
                    LinkedList<Integer> secondlist = new LinkedList<Integer>();
                    System.out.print("Enter elements for the second linked list (separated by space): ");
                    sc.nextLine(); // Consume newline left-over
                    String[] elements = sc.nextLine().split(" ");
                    for (String eleStr : elements) {
                        secondlist.add(Integer.parseInt(eleStr));
                    }
                    System.out.println("Comparison result: " + linkedlist.equals(secondlist));
                    break;

                case 5:
                    ArrayList<Integer> arraylist = new ArrayList<Integer>(linkedlist);
                    System.out.println("Linkedlist converted to arraylist: " + arraylist);
                    break;

                case 6:
                    System.out.println("Exiting program ");
                    System.exit(0);

                default:
                    System.out.println("Invalid choice! Please enter a valid option.");
                    break;
            }
        }
    }
}
