SimpleInterestInterface.java
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface SimpleInterestInterface extends Remote {
    public double calculateSimpleInterest(double principle, double rate, double time) throws RemoteException;
}


SimpleInterest.java
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class SimpleInterest extends UnicastRemoteObject implements SimpleInterestInterface {

    public SimpleInterest() throws RemoteException {
        super();
    }

    @Override
    public double calculateSimpleInterest(double principle, double rate, double time) throws RemoteException {
        return (principle * rate * time) / 100;
    }
}


Server.java
import java.rmi.*;

public class Server {
    public static void main(String[] args) throws Exception {
        SimpleInterest obj = new SimpleInterest();
        Naming.rebind("SIMPLE", obj);
        System.out.println("Server Ready...");
    }
}



SimpleInterestClient.java
import java.rmi.*;

public class SimpleInterestClient {
    public static void main(String[] args) throws Exception {
        if (args.length != 3) {
            System.out.println("Irrelevant number of arguments...");
            System.exit(1);
        }
        
        try {
            SimpleInterestInterface obj = (SimpleInterestInterface) Naming.lookup("SIMPLE");
            double principle = Double.parseDouble(args[0]);
            double rate = Double.parseDouble(args[1]);
            double time = Double.parseDouble(args[2]);
            double interest = obj.calculateSimpleInterest(principle, rate, time);
            System.out.println("Simple Interest: " + interest);
        } catch (Exception e) {
            System.out.println("Exception: " + e.getMessage());
        }
    }
}
